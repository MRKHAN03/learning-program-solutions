-> Big O notation and how it helps in analyzing algorithms:

1. WHAT IS BIG O NOTATION?
Used to analyze the efficiency of an algorithm as the input approaches infinity. Which means as the size of the input to the algorithm grows, how drastically do the space and time requirements grow with it.

For example:
Let's say we have a dentist and she takes 30 minutes to treat each patient. As the line of patients increases, the time she takes to treat them scales linearly with all the patients waiting in the line. This is because it always takes her a CONSTANT AMOUNT OF TIME to treat each patient, which is 30 minutes. This gives us a general understanding of how long the dentist would take to treat 10,20,30 or even 1000 patients. This is because we know that she always takes a constant time of 30 minutes for each patient, it allows us to calculate the time she would take for treating any number of patients, by just multiplying the NUMBER OF PATIENTS by 30 MINUTES.
So with this we can say that the efficiency is LINEAR, i,e, Big O(n), where n = no. of patients




2. WHAT IS A CONSTANT?
A Constant is any step in your code that does not scale with the input to the function and is represented using Big O(1).

Eg:
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7};
        linearFunc(arr);
    }

    public static void linearFunc(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.println(100 * 1000);    <- this line of code always takes a constant time and will always result in the same value, i.e, 1,00,000 and will always                                       take the constant amount of time to return the same result.
        }
    }
}

Basically, every line of code is some kind of a function. Now if we look at the above example, let's consider a few important lines from above:

int[] arr = {1, 2, 3, 4, 5, 6, 7};  <- the original array you're passing
for (int i = 0; i < arr.length; i++) <- this line of code is the reason why the entire linear function is O(n), because as the size of n increases, the number of                                                iterations in the for loop also increases.

Now let's consider we have only one line of code in the function:

public static void linearFunc(int[] arr) {      <- we can see that with this function we pass in an array, but the function does nothing with the array.
     System.out.println(100 * 1000);   <- the only operation within the function is this line of code, and it is CONSTANT because it doesn't scale with any input. So                                          regardless how large the array passed is, this line of code will always produce the same result and this is the only line in                                        the function, therefore this entire function is O(1).
     }


But in the first function we have multiple lines that are O(1), yet we prioritize only the line which is O(n) and ignore the O(1) operations. Why?




3. ORDERS OF GROWTH
In Big O we have something called as Orders Of Growth:

Big-O Notation      Name

O(1)	            Constant          |    GOOD
O(log n)        	Logarithmic       |
O(n)	            Linear            |
O(n log n)	        Linearithmic      |
O(n²)	            Quadratic         |
O(n³)	            Cubic             |
O(2ⁿ)	            Exponential       |
O(n!)	            Factorial         ˅    BAD


In Big O notation, while determining the efficiency of an algorithm , we only care about the WORST case.
So all the O(1) operations are negligible to the O(n) operation , hence we ignore O(1) operations.

So, if we consider the lines:

int[] arr = {1, 2, 3, 4, 5, 6, 7};              -> O(1)
linearFunc(arr);                                -> O(1)
public static void linearFunc(int[] arr)        -> O(1)
for (int i = 0; i < arr.length; i++)            -> O(n)
System.out.println(100 * 1000);                 -> O(1)

We get:  O(1) + O(1) + O(1) + O(1) + O(n) = O(n)    -> all O(1) get cancelled and we will be left with O(n) because O(n) is the WORST PERFORMING or HIGHEST ORDER PART OF                                                      THE FUNCTION.


As the function's input moves towards infinity, the constants become less and less significant.